{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = React.useMemo(() => valueManager.parseInput(utils, value), [valueManager, utils, value]);\n  const [lastValidDateValue, setLastValidDateValue] = React.useState(parsedDateValue);\n  React.useEffect(() => {\n    if (parsedDateValue != null) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [parsedDateValue]);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: function (newDate, wrapperVariant) {\n      let selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const handleInputChange = React.useCallback((date, keyboardInputValue) => {\n    const cleanDate = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, date) : date;\n    onChange(cleanDate, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  const inputProps = React.useMemo(() => ({\n    onChange: handleInputChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [handleInputChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};","map":{"version":3,"sources":["/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/node_modules/@mui/x-date-pickers/internals/hooks/usePickerState.js"],"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","onAccept","onChange","value","utils","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","useMemo","parseInput","lastValidDateValue","setLastValidDateValue","useState","useEffect","draftState","dispatch","useReducer","state","action","type","payload","areValuesEqual","initialDate","setInitialDate","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","shouldCloseOnSelect","handleInputChange","keyboardInputValue","cleanDate","valueReducer","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = React.useMemo(() => valueManager.parseInput(utils, value), [valueManager, utils, value]);\n  const [lastValidDateValue, setLastValidDateValue] = React.useState(parsedDateValue);\n  React.useEffect(() => {\n    if (parsedDateValue != null) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [parsedDateValue]);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const handleInputChange = React.useCallback((date, keyboardInputValue) => {\n    const cleanDate = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, date) : date;\n    onChange(cleanDate, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  const inputProps = React.useMemo(() => ({\n    onChange: handleInputChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [handleInputChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};"]},"metadata":{},"sourceType":"module"}