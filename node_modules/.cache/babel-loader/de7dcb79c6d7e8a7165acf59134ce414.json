{"ast":null,"code":"const idb = require('idb');\n\nvar db;\nvar dbPromise = window.indexedDB.open('companiondb', 1, db => {\n  if (!db.objectStoreNames.contains('users')) {\n    db.createObjectStore('users', {\n      keyPath: 'id'\n    });\n  }\n\n  if (!db.objectStoreNames.contains('session')) {\n    db.createObjectStore('session', {\n      keyPath: 'id'\n    });\n  }\n\n  if (!db.objectStoreNames.contains('actions')) {\n    db.createObjectStore('actions', {\n      keyPath: 'id'\n    });\n  }\n\n  if (!db.objectStoreNames.contains('sync-posts')) {\n    db.createObjectStore('sync-posts', {\n      keyPath: 'id'\n    });\n  }\n});\n\ndbPromise.onsuccess = event => {\n  db = event.target.result;\n};\n\nlet writeData = (st, data) => {\n  return dbPromise.then(function (db) {\n    let tx = db.transaction(st, 'readwrite');\n    let store = tx.objectStore(st);\n    store.put(data);\n    return tx.complete;\n  });\n};\n\nlet readAllData = st => {\n  var tx = db.transaction(st, 'readonly');\n  var store = tx.objectStore(st);\n  return store.getAll();\n};\n\nlet clearAllData = st => {\n  indexedDB.deleteDatabase(st);\n  return dbPromise.then(function (db) {\n    var tx = db.transaction(st, 'readwrite');\n    var store = tx.objectStore(st);\n    store.delete('jwt');\n    store.clear();\n    return tx.complete;\n  });\n};\n\nexport { writeData, clearAllData, readAllData };","map":{"version":3,"sources":["/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/src/utils/db.js"],"names":["idb","require","db","dbPromise","window","indexedDB","open","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","event","target","result","writeData","st","data","then","tx","transaction","store","objectStore","put","complete","readAllData","getAll","clearAllData","deleteDatabase","delete","clear"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,IAAIC,EAAJ;AACA,IAAIC,SAAS,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,aAAtB,EAAqC,CAArC,EAAwCJ,EAAE,IAAI;AAC1D,MAAI,CAACA,EAAE,CAACK,gBAAH,CAAoBC,QAApB,CAA6B,OAA7B,CAAL,EAA4C;AACxCN,IAAAA,EAAE,CAACO,iBAAH,CAAqB,OAArB,EAA8B;AAACC,MAAAA,OAAO,EAAE;AAAV,KAA9B;AACH;;AACD,MAAI,CAACR,EAAE,CAACK,gBAAH,CAAoBC,QAApB,CAA6B,SAA7B,CAAL,EAA8C;AAC1CN,IAAAA,EAAE,CAACO,iBAAH,CAAqB,SAArB,EAAgC;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAhC;AACH;;AACD,MAAI,CAACR,EAAE,CAACK,gBAAH,CAAoBC,QAApB,CAA6B,SAA7B,CAAL,EAA8C;AAC1CN,IAAAA,EAAE,CAACO,iBAAH,CAAqB,SAArB,EAAgC;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAhC;AACH;;AACD,MAAI,CAACR,EAAE,CAACK,gBAAH,CAAoBC,QAApB,CAA6B,YAA7B,CAAL,EAAiD;AAC7CN,IAAAA,EAAE,CAACO,iBAAH,CAAqB,YAArB,EAAmC;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAnC;AACH;AACJ,CAbe,CAAhB;;AAeAP,SAAS,CAACQ,SAAV,GAAsBC,KAAK,IAAI;AAC3BV,EAAAA,EAAE,GAAGU,KAAK,CAACC,MAAN,CAAaC,MAAlB;AACD,CAFH;;AAKA,IAAIC,SAAS,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC1B,SAAOd,SAAS,CAACe,IAAV,CAAe,UAAShB,EAAT,EAAa;AAC/B,QAAIiB,EAAE,GAAGjB,EAAE,CAACkB,WAAH,CAAeJ,EAAf,EAAmB,WAAnB,CAAT;AACA,QAAIK,KAAK,GAAGF,EAAE,CAACG,WAAH,CAAeN,EAAf,CAAZ;AACAK,IAAAA,KAAK,CAACE,GAAN,CAAUN,IAAV;AACA,WAAOE,EAAE,CAACK,QAAV;AACH,GALM,CAAP;AAMH,CAPD;;AASA,IAAIC,WAAW,GAAIT,EAAD,IAAQ;AAGlB,MAAIG,EAAE,GAAGjB,EAAE,CAACkB,WAAH,CAAeJ,EAAf,EAAmB,UAAnB,CAAT;AACA,MAAIK,KAAK,GAAGF,EAAE,CAACG,WAAH,CAAeN,EAAf,CAAZ;AACA,SAAOK,KAAK,CAACK,MAAN,EAAP;AAEP,CAPD;;AASA,IAAIC,YAAY,GAAIX,EAAD,IAAQ;AACzBX,EAAAA,SAAS,CAACuB,cAAV,CAAyBZ,EAAzB;AAEE,SAAOb,SAAS,CAACe,IAAV,CAAe,UAAShB,EAAT,EAAa;AAC/B,QAAIiB,EAAE,GAAGjB,EAAE,CAACkB,WAAH,CAAeJ,EAAf,EAAmB,WAAnB,CAAT;AACJ,QAAIK,KAAK,GAAGF,EAAE,CAACG,WAAH,CAAeN,EAAf,CAAZ;AACAK,IAAAA,KAAK,CAACQ,MAAN,CAAa,KAAb;AACIR,IAAAA,KAAK,CAACS,KAAN;AACA,WAAOX,EAAE,CAACK,QAAV;AACD,GANI,CAAP;AAOH,CAVD;;AAYA,SAAST,SAAT,EAAoBY,YAApB,EAAkCF,WAAlC","sourcesContent":["const idb = require('idb');\nvar db;\nvar dbPromise = window.indexedDB.open('companiondb', 1, db => {\n    if (!db.objectStoreNames.contains('users')) {\n        db.createObjectStore('users', {keyPath: 'id'});\n    }\n    if (!db.objectStoreNames.contains('session')) {\n        db.createObjectStore('session', {keyPath: 'id'});\n    }\n    if (!db.objectStoreNames.contains('actions')) {\n        db.createObjectStore('actions', {keyPath: 'id'});\n    }\n    if (!db.objectStoreNames.contains('sync-posts')) {\n        db.createObjectStore('sync-posts', {keyPath: 'id'});\n    }\n});\n\ndbPromise.onsuccess = event => {\n    db = event.target.result;\n  };\n\n\nlet writeData = (st, data) => {\n    return dbPromise.then(function(db) {\n        let tx = db.transaction(st, 'readwrite');\n        let store = tx.objectStore(st);\n        store.put(data);\n        return tx.complete;\n    });\n}\n\nlet readAllData = (st) => {\n\n  \n        var tx = db.transaction(st, 'readonly');\n        var store = tx.objectStore(st);\n        return store.getAll();\n    \n}\n\nlet clearAllData = (st) => {\n\t\tindexedDB.deleteDatabase(st)\n\n    return dbPromise.then(function(db) {\n        var tx = db.transaction(st, 'readwrite');\n\t\t\t\tvar store = tx.objectStore(st);\n\t\t\t\tstore.delete('jwt');\n        store.clear();\n        return tx.complete;\n      });\n}\n\nexport { writeData, clearAllData, readAllData } ;\n"]},"metadata":{},"sourceType":"module"}