{"ast":null,"code":"import * as moment from \"moment\";\n\nconst jsonCheck = testString => {\n  try {\n    const json = JSON.parse(testString);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst convertToHttps = url => {\n  if (url == undefined || url == null) {\n    return url;\n  } else {\n    return url.replace(\"http://\", \"https://\");\n  }\n};\n\nconst addDate = (targetDate, numberOfDays) => {\n  const newdate = new Date(targetDate);\n  newdate.setDate(newdate.getDate() + numberOfDays);\n  return newdate;\n};\n\nconst subtractDate = (targetDate, numberOfDays) => {\n  const newdate = new Date(targetDate);\n  newdate.setDate(newdate.getDate() - numberOfDays);\n  return newdate;\n};\n\nconst normalDate = my_date => {\n  const normal_date = new Date(my_date); // console.log(normal_date.getMonth())\n  // let month = parseInt(normal_date.getMonth());\n  // return  (month + 1 ) + '/' + normal_date.getDate() + '/' + normal_date.getFullYear();\n\n  return normal_date;\n};\n\nconst formatDateByNumber = my_date => {\n  const date = new Date(my_date);\n  const yr = date.getFullYear();\n  const dd = date.getDate();\n  const mm = date.getMonth() + 1;\n  return yr + \"-\" + mm + \"-\" + dd;\n};\n\nconst prettifyDate = my_date => {\n  //added catcher for NULL, UNDEFINED, and \"\";\n  if (my_date) {\n    const date = new Date(my_date);\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear();\n  } else {\n    return \"-\";\n  }\n};\n\nconst prettifyDateAndTime = my_date => {\n  const date = new Date(my_date);\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const time = moment(my_date).format(\"h:mm a\");\n  return months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear() + \" \" + time;\n};\n\nconst shortenMonthName = my_date => {\n  const months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n  const shortMonths = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"]; //sample my_date = \"january 1\"\n  //returned value will be \"JAN 01\"\n  //this is used in salesDeliveryStatus.js, filtering <SO Date>!\n\n  let stringArrayQuery = my_date.split(\" \");\n\n  if (stringArrayQuery[0] && months.indexOf(stringArrayQuery[0].toLowerCase())) {\n    stringArrayQuery[0] = shortMonths[months.indexOf(stringArrayQuery[0])];\n  }\n\n  if (stringArrayQuery[1] && stringArrayQuery[1].length < 2) {\n    stringArrayQuery[1] = \"0\" + stringArrayQuery[1];\n  }\n\n  return stringArrayQuery.join(\" \");\n};\n\nconst jsonToURI = data => {\n  let query = \"\";\n\n  for (const key in data) {\n    query += encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]) + \"&\";\n  }\n\n  return query;\n};\n\nconst urlBase64ToUint8Array = base64String => {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n};\n\nconst emailFormat = email => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email.toLowerCase());\n};\n\nconst displacement = coordinates => {\n  if (coordinates !== null && coordinates !== undefined) {\n    if (coordinates.origin !== null && coordinates.origin !== undefined) {\n      const origin = coordinates.origin;\n      const destination = coordinates.destination == undefined ? {\n        lat: 0,\n        lng: 0\n      } : coordinates.destination;\n      const R = 6371; // km (change this constant to get miles)\n\n      const dLat = (destination.lat - origin.lat) * Math.PI / 180;\n      const dLng = (destination.lng - origin.lng) * Math.PI / 180;\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(origin.lat * Math.PI / 180) * Math.cos(destination.lat * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      const d = R * c;\n      if (d > 1) return Math.round(d) + \" KM(s) Away\";else if (d <= 1) return Math.round(d * 1000) + \" M\";\n      return d;\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst parseTimestamp = (dataset, timestampAccessor) => dataset.map(data => {\n  let currentDate, month, day, year, hours, minutes, seconds;\n  currentDate = new Date(data[timestampAccessor]);\n  /* Make readable date */\n\n  month = currentDate.toLocaleString(\"default\", {\n    month: \"long\"\n  });\n  day = currentDate.getDate();\n  year = currentDate.getFullYear();\n  data.readable_date = `${month} ${day}, ${year}`;\n  /* Make readable time */\n\n  hours = currentDate.getHours();\n  minutes = (currentDate.getMinutes() < 10 ? \"0\" : \"\") + currentDate.getMinutes();\n  seconds = (currentDate.getSeconds() < 10 ? \"0\" : \"\") + currentDate.getSeconds();\n  data.readable_time = `${hours}:${minutes}:${seconds}`;\n});\n\nconst parseTimestampForReceipts = (dataset, timestampAccessor) => dataset.map(data => {\n  let currentDate, month, day, year, hours, minutes, seconds;\n  currentDate = new Date(data[timestampAccessor]);\n  /* Make readable date */\n\n  month = currentDate.toLocaleString(\"default\", {\n    month: \"long\"\n  });\n  day = currentDate.getDate();\n  year = currentDate.getFullYear();\n  data.readable_date = `${month} ${day}, ${year}`;\n  /* Make readable time */\n\n  hours = currentDate.getHours();\n  minutes = currentDate.getMinutes();\n  seconds = currentDate.getSeconds();\n  data.readable_time = currentDate.toLocaleString(\"en-US\", {\n    hour: \"numeric\",\n    hour12: true,\n    minute: \"2-digit\"\n  });\n});\n\nconst handleNullData = dataset => dataset.forEach(dataset => {\n  for (const key in dataset) if (!dataset[key]) dataset[key] = \"-\";\n});\n\nexport { emailFormat, urlBase64ToUint8Array, prettifyDateAndTime, jsonToURI, formatDateByNumber, addDate, subtractDate, prettifyDate, normalDate, convertToHttps, jsonCheck, displacement, parseTimestamp, parseTimestampForReceipts, handleNullData, shortenMonthName };","map":{"version":3,"sources":["/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/src/utils/utility.js"],"names":["moment","jsonCheck","testString","json","JSON","parse","e","convertToHttps","url","undefined","replace","addDate","targetDate","numberOfDays","newdate","Date","setDate","getDate","subtractDate","normalDate","my_date","normal_date","formatDateByNumber","date","yr","getFullYear","dd","mm","getMonth","prettifyDate","months","prettifyDateAndTime","time","format","shortenMonthName","shortMonths","stringArrayQuery","split","indexOf","toLowerCase","length","join","jsonToURI","data","query","key","encodeURIComponent","urlBase64ToUint8Array","base64String","padding","repeat","base64","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","emailFormat","email","re","test","displacement","coordinates","origin","destination","lat","lng","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","d","round","parseTimestamp","dataset","timestampAccessor","map","currentDate","month","day","year","hours","minutes","seconds","toLocaleString","readable_date","getHours","getMinutes","getSeconds","readable_time","parseTimestampForReceipts","hour","hour12","minute","handleNullData","forEach"],"mappings":"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","sourcesContent":["import * as moment from \"moment\";\n\nconst jsonCheck = (testString) => {\n\ttry {\n\t\tconst json = JSON.parse(testString);\n\t\treturn true;\n\t}\n\tcatch (e) {\n\t\treturn false;\n\t}\n};\n\nconst convertToHttps = (url) => {\n\tif (url == undefined || url == null) {\n\t\treturn url;\n\t}\n\telse {\n\t\treturn url.replace(\"http://\", \"https://\");\n\n\t}\n};\n\n\n\nconst addDate = (targetDate, numberOfDays) => {\n\tconst newdate = new Date(targetDate);\n\tnewdate.setDate(newdate.getDate() + numberOfDays);\n\treturn newdate;\n};\n\nconst subtractDate = (targetDate, numberOfDays) => {\n\tconst newdate = new Date(targetDate);\n\tnewdate.setDate(newdate.getDate() - numberOfDays);\n\treturn newdate;\n};\n\nconst normalDate = (my_date) => {\n\tconst normal_date = new Date(my_date);\n\t// console.log(normal_date.getMonth())\n\t// let month = parseInt(normal_date.getMonth());\n\t// return  (month + 1 ) + '/' + normal_date.getDate() + '/' + normal_date.getFullYear();\n\treturn normal_date;\n};\n\nconst formatDateByNumber = (my_date) => {\n\tconst date = new Date(my_date);\n\tconst yr = date.getFullYear();\n\tconst dd = date.getDate();\n\tconst mm = date.getMonth() + 1;\n\n\treturn yr + \"-\" + mm + \"-\" + dd;\n};\n\n\nconst prettifyDate = (my_date) => {\n\t//added catcher for NULL, UNDEFINED, and \"\";\n\tif (my_date) {\n\t\tconst date = new Date(my_date);\n\t\tconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\treturn months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear();\n\t} else {\n\t\treturn \"-\";\n\t}\n};\n\n\nconst prettifyDateAndTime = (my_date) => {\n\tconst date = new Date(my_date);\n\tconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\tconst time = moment(my_date).format(\"h:mm a\");\n\treturn months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear() + \" \" + time;\n};\n\nconst shortenMonthName = (my_date) => {\n\tconst months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n\tconst shortMonths = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\n\n\t//sample my_date = \"january 1\"\n\t//returned value will be \"JAN 01\"\n\t//this is used in salesDeliveryStatus.js, filtering <SO Date>!\n\tlet stringArrayQuery = my_date.split(\" \");\n\tif (stringArrayQuery[0] && months.indexOf(stringArrayQuery[0].toLowerCase())) {\n\t\tstringArrayQuery[0] = shortMonths[months.indexOf(stringArrayQuery[0])];\n\t}\n\n\tif (stringArrayQuery[1] && stringArrayQuery[1].length < 2) {\n\t\tstringArrayQuery[1] = \"0\" + stringArrayQuery[1];\n\t}\n\treturn (stringArrayQuery.join(\" \"))\n}\n\n\nconst jsonToURI = (data) => {\n\tlet query = \"\";\n\tfor (const key in data) {\n\t\tquery += encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]) + \"&\";\n\t}\n\treturn query;\n};\n\nconst urlBase64ToUint8Array = (base64String) => {\n\tconst padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n\tconst base64 = (base64String + padding)\n\t\t.replace(/\\-/g, \"+\")\n\t\t.replace(/_/g, \"/\");\n\n\tconst rawData = window.atob(base64);\n\tconst outputArray = new Uint8Array(rawData.length);\n\n\tfor (let i = 0; i < rawData.length; ++i) {\n\t\toutputArray[i] = rawData.charCodeAt(i);\n\t}\n\treturn outputArray;\n};\n\nconst emailFormat = (email) => {\n\tconst re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n\treturn re.test(email.toLowerCase());\n};\n\nconst displacement = (coordinates) => {\n\tif (coordinates !== null && coordinates !== undefined) {\n\t\tif (coordinates.origin !== null && coordinates.origin !== undefined) {\n\t\t\tconst origin = coordinates.origin;\n\t\t\tconst destination = coordinates.destination == undefined ? { lat: 0, lng: 0 } : coordinates.destination;\n\t\t\tconst R = 6371; // km (change this constant to get miles)\n\t\t\tconst dLat = (destination.lat - origin.lat) * Math.PI / 180;\n\t\t\tconst dLng = (destination.lng - origin.lng) * Math.PI / 180;\n\t\t\tconst a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n\t\t\t\tMath.cos(origin.lat * Math.PI / 180) * Math.cos(destination.lat * Math.PI / 180) *\n\t\t\t\tMath.sin(dLng / 2) * Math.sin(dLng / 2);\n\t\t\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\t\tconst d = R * c;\n\n\n\t\t\tif (d > 1) return Math.round(d) + \" KM(s) Away\";\n\t\t\telse if (d <= 1) return Math.round(d * 1000) + \" M\";\n\t\t\treturn d;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n\telse {\n\t\treturn null;\n\t}\n\n};\n\nconst parseTimestamp = (dataset, timestampAccessor) => dataset.map(\n\t(data) => {\n\t\tlet currentDate, month, day, year, hours, minutes, seconds;\n\t\tcurrentDate = new Date(data[timestampAccessor]);\n\n\t\t/* Make readable date */\n\t\tmonth = currentDate.toLocaleString(\"default\", { month: \"long\" });\n\t\tday = currentDate.getDate();\n\t\tyear = currentDate.getFullYear();\n\t\tdata.readable_date = `${month} ${day}, ${year}`;\n\n\t\t/* Make readable time */\n\t\thours = currentDate.getHours();\n\t\tminutes = (currentDate.getMinutes() < 10 ? \"0\" : \"\") + currentDate.getMinutes();\n\t\tseconds = (currentDate.getSeconds() < 10 ? \"0\" : \"\") + currentDate.getSeconds();\n\t\tdata.readable_time = `${hours}:${minutes}:${seconds}`;\n\t}\n);\n\nconst parseTimestampForReceipts = (dataset, timestampAccessor) => dataset.map(\n\t(data) => {\n\t\tlet currentDate, month, day, year, hours, minutes, seconds;\n\t\tcurrentDate = new Date(data[timestampAccessor]);\n\n\t\t/* Make readable date */\n\t\tmonth = currentDate.toLocaleString(\"default\", { month: \"long\" });\n\t\tday = currentDate.getDate();\n\t\tyear = currentDate.getFullYear();\n\t\tdata.readable_date = `${month} ${day}, ${year}`;\n\n\t\t/* Make readable time */\n\t\thours = currentDate.getHours();\n\t\tminutes = currentDate.getMinutes();\n\t\tseconds = currentDate.getSeconds();\n\t\tdata.readable_time = currentDate.toLocaleString(\"en-US\", { hour: \"numeric\", hour12: true, minute: \"2-digit\" });\n\t}\n);\n\nconst handleNullData = (dataset) => dataset.forEach(\n\t(dataset) => {\n\t\tfor (const key in dataset)\n\t\t\tif (!dataset[key])\n\t\t\t\tdataset[key] = \"-\";\n\t}\n);\n\n\nexport { emailFormat, urlBase64ToUint8Array, prettifyDateAndTime, jsonToURI, formatDateByNumber, addDate, subtractDate, prettifyDate, normalDate, convertToHttps, jsonCheck, displacement, parseTimestamp, parseTimestampForReceipts, handleNullData, shortenMonthName };\n"]},"metadata":{},"sourceType":"module"}