{"ast":null,"code":"var _jsxFileName = \"/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/src/utils/routes.js\";\nimport React, { Fragment } from 'react';\nimport Login from '../shared/login';\nimport Canvas from '../components/canvas';\nimport ForgotPassword from '../components/forgotPassword';\nimport ResetPassword from '../components/resetPassword';\nimport PageBuilder from '../components/PageBuilder';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { menuConfig } from './menu';\nimport queryString from 'query-string';\nimport { myConfig } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet componentsToUse = [];\n\nconst Routes = props => {\n  let fakeAuth = {\n    isAuthenticated: false,\n\n    authenticate(cb) {\n      this.isAuthenticated = true;\n      setTimeout(cb, 100); // fake async\n    },\n\n    signout(cb) {\n      this.isAuthenticated = false;\n      setTimeout(cb, 100);\n    }\n\n  };\n  let storeSession = {\n    isAuthenticated: {},\n\n    authenticate(session) {\n      this.isAuthenticated = session;\n    }\n\n  };\n\n  let getActiveMenu = label => {\n    let result;\n    let title;\n    menuConfig.forEach((item, i) => {\n      if (label.toUpperCase().replace(/\\s/g, \"-\") == item.slug.toUpperCase()) {\n        menuConfig[i].isActive = true;\n        result = item.pageModule;\n        title = item.pageLabel;\n      } else {\n        menuConfig[i].isActive = false;\n      }\n    });\n    return {\n      result,\n      title\n    };\n  };\n\n  let menuRoute = that => {\n    let url = that.props.match.params.name.toUpperCase().replace(/-/g, ' ');\n    let pageModule = getActiveMenu(url).result;\n\n    if (!componentsToUse[pageModule]) {\n      const ComponentToRender = require(\"../views/\" + pageModule).default;\n\n      componentsToUse[pageModule] = /*#__PURE__*/_jsxDEV(ComponentToRender, {\n        parent: that,\n        toggleSidebar: () => props.toggleSidebar(),\n        menuRoute: index => menuRoute(index),\n        auth: fakeAuth,\n        clientId: props.clientId,\n        setUserSession: user => props.setUserSession(user),\n        changePageHandler: pageId => props.changePageHandler(pageId),\n        getSession: () => props.getSession(),\n        location: props.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 44\n      }, this);\n    }\n\n    return componentsToUse[pageModule];\n  };\n\n  let RenderPage = () => {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => // ( props.getSession().user == null || props.getSession().user == undefined && props.location != undefined ?\n        !fakeAuth.isAuthenticated && !props.getSession().user ? /*#__PURE__*/_jsxDEV(Login, {\n          changePageHandler: pageId => props.changePageHandler(pageId),\n          setUserSession: user => props.setUserSession(user),\n          getSession: () => props.getSession(),\n          location: props.location,\n          session: storeSession,\n          auth: fakeAuth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 22\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/dashboard/home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard/:name\",\n        render: () => !fakeAuth.isAuthenticated && (props.getSession().user == null || props.getSession().user == undefined) ? /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 22\n        }, this) : /*#__PURE__*/_jsxDEV(PageBuilder, {\n          toggleSidebar: () => props.toggleSidebar(),\n          sidebar: props.toggleDrawer,\n          menuRoute: that => menuRoute(that),\n          auth: fakeAuth,\n          clientId: props.clientId,\n          setUserSession: user => props.setUserSession(user),\n          changePageHandler: pageId => props.changePageHandler(pageId),\n          getSession: () => props.getSession(),\n          location: props.location\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/forgot-password\",\n        render: () => /*#__PURE__*/_jsxDEV(ForgotPassword, {\n          changePageHandler: pageId => props.changePageHandler(pageId),\n          setUserSession: user => props.setUserSession(user),\n          getSession: () => props.getSession()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  };\n\n  let content = null;\n  const parsed = queryString.parseUrl(window.location.href); //If there are no token query string. Use paths in RenderPage\n\n  if (parsed.query == null || parsed.query.token == undefined) {\n    content = /*#__PURE__*/_jsxDEV(RenderPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this); //Else prompt the resetpassword screen\n  } else {\n    content = /*#__PURE__*/_jsxDEV(ResetPassword, {\n      token: parsed.query.token,\n      changePageHandler: pageId => props.changePageHandler(pageId),\n      setUserSession: user => props.setUserSession(user),\n      getSession: () => props.getSession()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Fragment, {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Routes;\nexport default Routes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"sources":["/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/src/utils/routes.js"],"names":["React","Fragment","Login","Canvas","ForgotPassword","ResetPassword","PageBuilder","BrowserRouter","Router","Route","Redirect","menuConfig","queryString","myConfig","componentsToUse","Routes","props","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","storeSession","session","getActiveMenu","label","result","title","forEach","item","i","toUpperCase","replace","slug","isActive","pageModule","pageLabel","menuRoute","that","url","match","params","name","ComponentToRender","require","default","toggleSidebar","index","clientId","user","setUserSession","pageId","changePageHandler","getSession","location","RenderPage","undefined","toggleDrawer","content","parsed","parseUrl","window","href","query","token"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport Login from '../shared/login';\nimport Canvas from '../components/canvas';\nimport ForgotPassword from '../components/forgotPassword';\nimport ResetPassword from '../components/resetPassword';\nimport PageBuilder from '../components/PageBuilder';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { menuConfig } from './menu';\n\nimport queryString from 'query-string';\nimport { myConfig } from './config';\nlet componentsToUse = [];\nconst Routes = (props) => {\n    let fakeAuth = {\n        isAuthenticated: false,\n        authenticate(cb) {\n            this.isAuthenticated = true;\n            setTimeout(cb, 100); // fake async\n        },\n        signout(cb) {\n            this.isAuthenticated = false;\n            setTimeout(cb, 100);\n        }\n    };\n\n    let storeSession = {\n        isAuthenticated: {},\n        authenticate(session) {\n            this.isAuthenticated = session;\n        }\n    };\n\n    let getActiveMenu = (label) => {\n        let result;\n        let title;\n        menuConfig.forEach((item, i) => {\n            if (label.toUpperCase().replace(/\\s/g, \"-\") == item.slug.toUpperCase()) {\n                menuConfig[i].isActive = true;\n                result = item.pageModule;\n                title = item.pageLabel;\n            } else {\n                menuConfig[i].isActive = false;\n            }\n        });\n        return { result, title };\n    }\n\n    let menuRoute = (that) => {\n        let url = that.props.match.params.name.toUpperCase().replace(/-/g, ' ');\n        let pageModule = getActiveMenu(url).result;\n        if (!componentsToUse[pageModule]) {\n            const ComponentToRender = require(\"../views/\" + pageModule).default;\n            componentsToUse[pageModule] = (<ComponentToRender\n                parent={that}\n                toggleSidebar={() => props.toggleSidebar()}\n                menuRoute={(index) => menuRoute(index)}\n                auth={fakeAuth}\n                clientId={props.clientId}\n                setUserSession={(user) => props.setUserSession(user)}\n                changePageHandler={(pageId) => props.changePageHandler(pageId)}\n                getSession={() => props.getSession()}\n                location={props.location} />);\n        }\n        return (componentsToUse[pageModule]);\n    }\n\n    let RenderPage = () => {\n        return (\n            <Fragment>\n                {/**********************LOGIN**********************/}\n                <Route exact path=\"/\" render={() =>\n                // ( props.getSession().user == null || props.getSession().user == undefined && props.location != undefined ?\n                (!fakeAuth.isAuthenticated && !props.getSession().user ?\n                    (<Login\n                        changePageHandler={(pageId) => props.changePageHandler(pageId)}\n                        setUserSession={(user) => props.setUserSession(user)}\n                        getSession={() => props.getSession()}\n                        location={props.location}\n                        session={storeSession}\n                        auth={fakeAuth} />\n                    ) :\n                    (<Redirect to=\"/dashboard/home\" />)\n                )} />\n                {/**********************HOME**********************/}\n                <Route path=\"/dashboard/:name\" render={() =>\n                (!fakeAuth.isAuthenticated && (props.getSession().user == null || props.getSession().user == undefined) ?\n                    (<Redirect to=\"/\" />) :\n                    (\n                        <PageBuilder\n                            toggleSidebar={() => props.toggleSidebar()}\n                            sidebar={props.toggleDrawer}\n                            menuRoute={(that) => menuRoute(that)}\n                            auth={fakeAuth}\n                            clientId={props.clientId}\n                            setUserSession={(user) => props.setUserSession(user)}\n                            changePageHandler={(pageId) => props.changePageHandler(pageId)}\n                            getSession={() => props.getSession()}\n                            location={props.location}\n                        />\n                    )\n                )} />\n                {/**********************FORGOT PASSWORD**********************/}\n                <Route path=\"/forgot-password\" render={() =>\n                (<ForgotPassword\n                    changePageHandler={(pageId) => props.changePageHandler(pageId)}\n                    setUserSession={(user) => props.setUserSession(user)}\n                    getSession={() => props.getSession()} />)\n                } />\n            </Fragment>\n        )\n    }\n\n    let content = null;\n    const parsed = queryString.parseUrl(window.location.href);\n    //If there are no token query string. Use paths in RenderPage\n    if (parsed.query == null || parsed.query.token == undefined) {\n        content = (\n            <RenderPage />\n        );\n        //Else prompt the resetpassword screen\n    } else {\n        content = (\n            <ResetPassword\n                token={parsed.query.token}\n                changePageHandler={(pageId) => props.changePageHandler(pageId)}\n                setUserSession={(user) => props.setUserSession(user)}\n                getSession={() => props.getSession()} />\n        )\n    }\n\n    return (\n        <Canvas>\n            <Router>\n                <Fragment>\n                    {content}\n                </Fragment>\n            </Router>\n        </Canvas>\n    )\n\n}\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}