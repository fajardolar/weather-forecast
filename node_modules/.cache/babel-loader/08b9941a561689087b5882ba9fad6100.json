{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction askForNotificationPermission() {}\n\nexport default function register() {\n  if ((process.env.NODE_ENV === \"production\" || process.env.NODE_ENV === \"development\") && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const enableNotificationsButton = document.querySelectorAll(\".enable-notifications\");\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://goo.gl/SC7cgQ\");\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log(\"New content is available; please refresh.\");\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","askForNotificationPermission","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","enableNotificationsButton","document","querySelectorAll","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nfunction askForNotificationPermission() {}\n\nexport default function register() {\n    if (\n        (process.env.NODE_ENV === \"production\" ||\n            process.env.NODE_ENV === \"development\") &&\n        \"serviceWorker\" in navigator\n    ) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const enableNotificationsButton = document.querySelectorAll(\n                \".enable-notifications\"\n            );\n            const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                \"New content is available; please refresh.\"\n                            );\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\").indexOf(\"javascript\") ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}