{"ast":null,"code":"import { jsonToURI } from '../utils/utility';\nimport { writeData, readAllData } from '../utils/db';\nimport { myConfig } from '../utils/config';\nimport { endpoints } from './restEndpoints';\nimport { isSessionExpired } from '../utils/security';\n\nconst axios = require('axios');\n\nlet createQueryStrings = obj => {\n  let str = [];\n  let returnString = \"\";\n\n  for (var p in obj) if (obj.hasOwnProperty(p)) {\n    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n  }\n\n  if (str.length > 0) {\n    returnString = \"?\" + str.join(\"&\");\n  }\n\n  return returnString;\n};\n\nlet apiModule = async (my_module, requestParams, formData, queryStrings, special) => {\n  let url = endpoints(requestParams)[my_module].url;\n  let headers = endpoints(requestParams)[my_module].headers;\n  let method = endpoints(requestParams)[my_module].method;\n  let server_url = myConfig.SERVER_URL;\n\n  if (endpoints(requestParams)[my_module].server_url !== null && endpoints(requestParams)[my_module].server_url !== undefined) {\n    server_url = endpoints(requestParams)[my_module].server_url;\n  }\n\n  writeData('actions', {\n    last_action: Date.now(),\n    id: 1\n  });\n\n  if (queryStrings === null || queryStrings === undefined) {\n    queryStrings = \"\";\n  } //Use axios whenver we want to use application/json as the body header. Otherwise we will use x-www-form-urlencoded\n\n\n  if (special) {\n    return new Promise(function (resolve, reject) {\n      let myUrl = server_url + url + queryStrings;\n      axios({\n        method: method,\n        url: myUrl,\n        data: formData,\n        headers: headers\n      }).then(function (data) {\n        writeData('actions', {\n          last_action: Date.now(),\n          id: 1\n        });\n        resolve(data);\n      }).catch(function (err) {\n        writeData('actions', {\n          last_action: Date.now(),\n          id: 1\n        });\n        reject(err);\n      });\n    });\n  } else if (headers[\"Content-Type\"] != undefined && headers[\"Content-Type\"] == \"application/json\") {\n    /*HANDLING JSON CONTENT TYPE*/\n    return new Promise(function (resolve, reject) {\n      fetch(server_url + url + queryStrings, {\n        method: method,\n        headers: headers,\n        body: formData\n      }).then(function (response) {\n        return response.json();\n      }).then(async function (data) {\n        await isSessionExpired(data);\n        writeData('actions', {\n          last_action: Date.now(),\n          id: 1\n        });\n        resolve(data);\n      }).catch(function (err) {\n        writeData('actions', {\n          last_action: Date.now(),\n          id: 1\n        });\n        reject(err);\n      });\n    });\n  } else if (headers[\"Content-Type\"] != undefined && headers[\"Content-Type\"] == \"multipart/form-data\") {\n    return new Promise(function (resolve, reject) {\n      let myUrl = server_url + url;\n      axios({\n        method: method,\n        url: myUrl,\n        data: formData,\n        headers: headers\n      }).then(function (data) {\n        writeData('actions', {\n          last_action: Date.now(),\n          id: 1\n        });\n        resolve(data);\n      }).catch(function (err) {\n        writeData('actions', {\n          last_action: Date.now(),\n          id: 1\n        });\n        reject(err);\n      });\n    });\n  } else {\n    /*HANDLING FORM URL ENCODED CONTENT TYPE AND GET REQUESTS*/\n    let data = jsonToURI(formData);\n    return new Promise(function (resolve, reject) {\n      if (data === null || data === '') {\n        console.log(server_url + url + queryStrings);\n        fetch(server_url + url + queryStrings, {\n          method: method,\n          headers: headers\n        }).then(function (response) {\n          return response.json();\n        }).then(async function (data) {\n          await isSessionExpired(data);\n          writeData('actions', {\n            last_action: Date.now(),\n            id: 1\n          });\n          resolve(data);\n        }).catch(function (err) {\n          writeData('actions', {\n            last_action: Date.now(),\n            id: 1\n          });\n          reject(err);\n        });\n      } else {\n        console.log(server_url + url + queryStrings);\n        fetch(server_url + url + queryStrings, {\n          method: method,\n          headers: headers,\n          body: data\n        }).then(function (response) {\n          return response.json();\n        }).then(async function (data) {\n          await isSessionExpired(data);\n          writeData('actions', {\n            last_action: Date.now(),\n            id: 1\n          });\n          resolve(data);\n        }).catch(function (err) {\n          writeData('actions', {\n            last_action: Date.now(),\n            id: 1\n          });\n          reject(err);\n        });\n      }\n    });\n  }\n};\n\nlet apiCall = (url, method, headers, formData) => {\n  return new Promise(function (resolve, reject) {\n    fetch(myConfig.SERVER_URL + url, {\n      method: method,\n      headers: headers,\n      body: formData\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      resolve(data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\nlet offlineSync = (my_module, requestParams, formData) => {\n  let url = endpoints(requestParams)[my_module].url;\n  let headers = endpoints(requestParams)[my_module].headers;\n  let method = endpoints(requestParams)[my_module].method;\n  let post = {};\n  post.requestParams = {\n    url: url,\n    method: method,\n    headers: headers\n  };\n  post.data = {\n    formData\n  };\n  let id = 0;\n  return new Promise(function (resolve, reject) {\n    navigator.serviceWorker.ready.then(function (sw) {\n      readAllData('sync-posts').then(function (sync) {\n        id = sync.length + 1;\n        return id;\n      }).then(function (id) {\n        writeData('sync-posts', {\n          post,\n          id: id\n        }).then(function () {\n          return sw.sync.register('sync-new-posts');\n        });\n        resolve({\n          message: 'Post is saved for syncing',\n          result: 'success'\n        });\n        return {\n          message: 'Post is saved for syncing',\n          result: 'success'\n        };\n      });\n    });\n  });\n};\n\nexport { apiCall, offlineSync, apiModule, createQueryStrings };","map":{"version":3,"sources":["/Users/larainefajardo/Desktop/web_app/_progressive_web_app/react/companion/src/api/apiCall.js"],"names":["jsonToURI","writeData","readAllData","myConfig","endpoints","isSessionExpired","axios","require","createQueryStrings","obj","str","returnString","p","hasOwnProperty","push","encodeURIComponent","length","join","apiModule","my_module","requestParams","formData","queryStrings","special","url","headers","method","server_url","SERVER_URL","undefined","last_action","Date","now","id","Promise","resolve","reject","myUrl","data","then","catch","err","fetch","body","response","json","console","log","apiCall","offlineSync","post","navigator","serviceWorker","ready","sw","sync","register","message","result"],"mappings":"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","sourcesContent":["import { jsonToURI } from '../utils/utility';\nimport { writeData, readAllData } from '../utils/db';\nimport { myConfig } from '../utils/config';\nimport { endpoints } from './restEndpoints';\nimport { isSessionExpired } from '../utils/security';\nconst axios = require('axios');\n\n\nlet createQueryStrings = (obj) => {\n  let str = [];\n  let returnString = \"\";\n  for (var p in obj)\n    if (obj.hasOwnProperty(p)) {\n      str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n    }\n\n  if (str.length > 0) {\n    returnString = \"?\" + str.join(\"&\");\n  }\n  return returnString;\n}\n\n\nlet apiModule = async (my_module, requestParams, formData, queryStrings, special) => {\n  let url = endpoints(requestParams)[my_module].url;\n\n  let headers = endpoints(requestParams)[my_module].headers;\n  let method = endpoints(requestParams)[my_module].method;\n  let server_url = myConfig.SERVER_URL;\n  if (endpoints(requestParams)[my_module].server_url !== null &&\n    endpoints(requestParams)[my_module].server_url !== undefined) {\n    server_url = endpoints(requestParams)[my_module].server_url;\n  }\n\n  writeData('actions', { last_action: Date.now(), id: 1 });\n\n  if (queryStrings === null || queryStrings === undefined) {\n    queryStrings = \"\";\n\n  }\n\n  //Use axios whenver we want to use application/json as the body header. Otherwise we will use x-www-form-urlencoded\n  if (special) {\n\n    return new Promise(function (resolve, reject) {\n      let myUrl = server_url + url + queryStrings;\n      axios(\n        {\n          method: method,\n          url: myUrl,\n          data: formData,\n          headers: headers\n        })\n        .then(function (data) {\n          writeData('actions', { last_action: Date.now(), id: 1 });\n          resolve(data);\n        })\n        .catch(function (err) {\n          writeData('actions', { last_action: Date.now(), id: 1 });\n          reject(err);\n        });\n    });\n\n  } else if (headers[\"Content-Type\"] != undefined && headers[\"Content-Type\"] == \"application/json\") {\n    /*HANDLING JSON CONTENT TYPE*/\n    return new Promise(function (resolve, reject) {\n\n      fetch(server_url + url + queryStrings, {\n        method: method,\n        headers: headers,\n        body: formData\n      })\n        .then(function (response) {\n          return response.json();\n        })\n        .then(async function (data) {\n          await isSessionExpired(data);\n          writeData('actions', { last_action: Date.now(), id: 1 });\n          resolve(data);\n        })\n        .catch(function (err) {\n          writeData('actions', { last_action: Date.now(), id: 1 });\n          reject(err);\n        });\n    });\n  }\n\n  else if (headers[\"Content-Type\"] != undefined && headers[\"Content-Type\"] == \"multipart/form-data\") {\n    return new Promise(function (resolve, reject) {\n      let myUrl = server_url + url;\n        axios(\n          {\n            method: method,\n            url: myUrl,\n            data: formData,\n            headers: headers\n          })\n        .then(function (data) {\n          writeData('actions', { last_action: Date.now(), id: 1 });\n          resolve(data);\n        })\n        .catch(function (err) {\n          writeData('actions', { last_action: Date.now(), id: 1 });\n          reject(err);\n        });\n    });\n  }\n\n  else {\n    /*HANDLING FORM URL ENCODED CONTENT TYPE AND GET REQUESTS*/\n    let data = jsonToURI(formData);\n    return new Promise(function (resolve, reject) {\n      if (data === null || data === '') {\n        console.log(server_url + url + queryStrings);\n        fetch(server_url + url + queryStrings, {\n          method: method,\n          headers: headers\n        })\n          .then(function (response) {\n            return response.json();\n          })\n          .then(async function (data) {\n            await isSessionExpired(data);\n            writeData('actions', { last_action: Date.now(), id: 1 });\n            resolve(data);\n          })\n          .catch(function (err) {\n            writeData('actions', { last_action: Date.now(), id: 1 });\n            reject(err);\n          });\n      } else {\n        console.log(server_url + url + queryStrings);\n        fetch(server_url + url + queryStrings, {\n          method: method,\n          headers: headers,\n          body: data\n        })\n          .then(function (response) {\n            return response.json();\n          })\n          .then(async function (data) {\n            await isSessionExpired(data);\n            writeData('actions', { last_action: Date.now(), id: 1 });\n            resolve(data);\n          })\n          .catch(function (err) {\n            writeData('actions', { last_action: Date.now(), id: 1 });\n            reject(err);\n          });\n\n      }\n    });\n  }\n\n}\n\nlet apiCall = (url, method, headers, formData) => {\n  return new Promise(function (resolve, reject) {\n    fetch(myConfig.SERVER_URL + url, {\n      method: method,\n      headers: headers,\n      body: formData\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (data) {\n        resolve(data);\n      })\n      .catch(function (err) {\n        reject(err);\n      });\n  });\n}\n\nlet offlineSync = (my_module, requestParams, formData) => {\n  let url = endpoints(requestParams)[my_module].url;\n  let headers = endpoints(requestParams)[my_module].headers;\n  let method = endpoints(requestParams)[my_module].method;\n  let post = {};\n  post.requestParams = { url: url, method: method, headers: headers };\n  post.data = { formData };\n  let id = 0;\n  return new Promise(function (resolve, reject) {\n    navigator.serviceWorker.ready\n      .then(function (sw) {\n        readAllData('sync-posts')\n          .then(function (sync) {\n            id = sync.length + 1;\n            return id;\n          })\n          .then(function (id) {\n            writeData('sync-posts', { post, id: id })\n              .then(function () {\n                return sw.sync.register('sync-new-posts');\n              })\n\n            resolve({ message: 'Post is saved for syncing', result: 'success' });\n            return ({ message: 'Post is saved for syncing', result: 'success' });\n\n          });\n      });\n  });\n}\n\nexport { apiCall, offlineSync, apiModule, createQueryStrings };\n"]},"metadata":{},"sourceType":"module"}